name: CI

# This setup assumes that you run the unit tests with code coverage in the same
# workflow that will also print the coverage report as comment to the pull request.
# Therefore, you need to trigger this workflow when a pull request is (re)opened or
# when new code is pushed to the branch of the pull request. In addition, you also
# need to trigger this workflow when new code is pushed to the main branch because
# we need to upload the code coverage results as artifact for the main branch as
# well since it will be the baseline code coverage.
#
# We do not want to trigger the workflow for pushes to *any* branch because this
# would trigger our jobs twice on pull requests (once from "push" event and once
# from "pull_request->synchronize")
on:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
  push:
    branches:
      - 'main'

jobs:
  build_tests:
    name: "Build & Test PR"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Check repository URL
        run: |
          REPO_URL=$(git config --get remote.origin.url)
          if [[ "$REPO_URL" == *"pro.git" ]]; then
            echo "This repository is not allowed to build."
            exit 1
          fi

      - uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Build Frontend
        env:
          CI: ""
        run: |
          cd web
          git describe --tags > VERSION
          export REACT_APP_VERSION=$(git describe --tags)
          chmod u+x ./build.sh
          ./build.sh
          cd ..

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: '1.18'  # 使用稳定版本

      - name: Build Backend (amd64)
        run: |
          VERSION=$(git describe --tags)
          LDFLAGS="-s -w -X 'github.com/songquanpeng/one-api/common.Version=$VERSION' -extldflags '-static'"

          go mod download
          go build -ldflags "$LDFLAGS" -o one-api

      - name: Build Backend (arm64)
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

          VERSION=$(git describe --tags)
          LDFLAGS="-s -w -X 'github.com/songquanpeng/one-api/common.Version=$VERSION' -extldflags '-static'"

          CC=aarch64-linux-gnu-gcc CGO_ENABLED=1 GOOS=linux GOARCH=arm64 go build -ldflags "$LDFLAGS" -o one-api-arm64

  commit_lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: wagoid/commitlint-github-action@v6
